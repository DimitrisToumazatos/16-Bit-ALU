// Copyright (C) 2019  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/02/2022 17:30:35"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          ALU_1Bit
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ALU_1Bit_vlg_vec_tst();
// constants                                           
// general purpose registers
reg a;
reg AInv;
reg b;
reg BInv;
reg CIn;
reg [1:0] Op;
// wires                                               
wire Cout;
wire Result;

// assign statements (if any)                          
ALU_1Bit i1 (
// port map - connection between master ports and signals/registers   
	.a(a),
	.AInv(AInv),
	.b(b),
	.BInv(BInv),
	.CIn(CIn),
	.Cout(Cout),
	.Op(Op),
	.Result(Result)
);
initial 
begin 
#1000000 $finish;
end 

// a
initial
begin
	a = 1'b1;
end 

// b
initial
begin
	b = 1'b1;
end 

// CIn
initial
begin
	CIn = 1'b0;
end 

// AInv
initial
begin
	AInv = 1'b0;
end 

// BInv
initial
begin
	BInv = 1'b0;
end 
// Op[ 1 ]
initial
begin
	Op[1] = 1'b1;
end 
// Op[ 0 ]
initial
begin
	Op[0] = 1'b1;
end 
endmodule

